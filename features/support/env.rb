# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as tCucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

Before do
  ActiveRecord::Fixtures.reset_cache
  fixtures_folder = File.join(Rails.root, 'spec', 'fixtures', 'ar')
  fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
  ActiveRecord::Fixtures.create_fixtures(fixtures_folder, fixtures)
end

# Creates a sample video with an attached tape, and digital file
Before '@sample' do

  # ArchivalVideo
  av = ArchivalVideo.new(:pid => "cucumber:1")  
  av.title = "Cucumber Sample 1"
  av.save

  # Tape
  tape = ExternalVideo.new(:pid => "cucumber:2")
  tape.define_physical_instantiation
  tape.save

  # File
  file = ExternalVideo.new(:pid => "cucumber:3")
  file.define_digital_instantiation
  file.save
  
  av.external_videos << tape
  av.external_videos << file
  av.save
  tape.save
  file.save
end

After '@sample' do
  av = ArchivalVideo.find("cucumber:1")
  av.delete

  tape = ExternalVideo.find("cucumber:2")
  tape.delete
end

# Creates a two sample videos with an attached tape, and digital file
# to test importing features.
Before '@import' do
  # ArchivalVideo
  av1 = ArchivalVideo.new(:pid => "cucumber:1")  
  av2 = ArchivalVideo.new(:pid => "cucumber:2")
  av1.title = "Cucumber Sample 1"
  av2.title = "Cucumber Sample 2"
  av1.save
  av2.save

  # Tape
  tape1 = ExternalVideo.new(:pid => "cucumber:3")
  tape1.define_physical_instantiation
  tape1.barcode = "1"
  tape1.save
  tape2 = ExternalVideo.new(:pid => "cucumber:4")
  tape2.barcode = "2"
  tape2.define_physical_instantiation
  tape2.save

  # File
  file1 = ExternalVideo.new(:pid => "cucumber:5")
  file1.define_digital_instantiation
  file1.save
  file2 = ExternalVideo.new(:pid => "cucumber:6")
  file2.define_digital_instantiation
  file2.save
  
  av1.external_videos = [tape1, file1]
  av2.external_videos = [tape2, file2]
  av1.save
  av2.save
  tape1.save
  file1.save
  tape2.save
  file2.save
end

After '@import' do
  (1..6).each do |n|
    av = ActiveFedora::Base.find("cucumber:"+n.to_s)
    av.delete
  end
end

After '@collections' do
  Rockhall::JettyCleaner.clean("arc")
end

Before '@javascript' do
  Capybara.current_session.driver.browser.manage.window.resize_to(1280, 1024)
end

After '@javascript' do
  page.execute_script "window.close();"
end


